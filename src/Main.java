import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.*;

class UnkownLexicalUnitException extends Exception {
    public UnkownLexicalUnitException() {
        super();
    }
}

public class Main {
    public static void main(String args[]) {

        ArrayList<Symbol> variables = new ArrayList<Symbol>();
        LexicalAnalyzer lexicalAnalyzer;

        try {

            lexicalAnalyzer = new LexicalAnalyzer(new FileReader("test/Euclid.ycc"));

            Symbol symbol;
            do {
                symbol = lexicalAnalyzer.nextSymbol();
                System.out.println(symbol.toString());

                if (symbol.getType() == LexicalUnit.VARNAME) {

                    if (!containsValue(symbol.getValue(), variables)) {
                        variables.add(symbol);
                    }

                }

            } while (symbol.getType() != LexicalUnit.END);

            System.out.println("Variables");
            sort(variables);

        } catch (FileNotFoundException e) {
            // Exception for the FileReader().
            e.printStackTrace();
        } catch (IOException e) {
            // Thrown by the Lexer generated by JFlex.
            e.printStackTrace();
        } catch (UnkownLexicalUnitException e) {
            // Thrown by us if an unknwon lexical unit is seen.
            System.err.println("UnkownLexicalUnitException...");
        }
    }

    public static void sort(ArrayList<Symbol> variables) {
        variables.sort(Comparator.comparing(
                
                var -> var.getValue().toString().toLowerCase()));

        for (Symbol var : variables) {
            System.out.println(var.getValue() + " " + var.getLine());
        }

    }

    public static boolean containsValue(Object value, ArrayList<Symbol> symbolsList) {
        for (Symbol var : symbolsList) {
            // TODO :Null pointer à vérifier
            if (value.equals(var.getValue())) {
                return true;
            }
        }
        return false;
    }

}
