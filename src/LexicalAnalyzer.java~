// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: LexicalAnalyzer.flex


@SuppressWarnings("fallthrough")
class LexicalAnalyzer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\2\1\1\2\2\1\22\0\1\1\7\0\1\3"+
    "\1\4\1\5\1\6\1\0\1\7\1\0\1\10\1\11"+
    "\11\12\1\0\1\13\1\14\1\15\1\16\2\0\3\17"+
    "\1\20\1\21\3\17\1\22\6\17\1\23\3\17\1\24"+
    "\2\17\1\25\3\17\4\0\1\26\1\0\3\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\2\27\1\36\1\27"+
    "\1\37\1\40\1\41\1\27\1\42\1\43\1\44\1\45"+
    "\5\27\1\46\1\47\1\50\7\0\1\2\u01a2\0\2\2"+
    "\326\0\u0100\2";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\2\12\1\13\1\14\1\15\7\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\2\16"+
    "\1\27\1\16\1\30\4\16\1\31\5\16\1\32\2\16"+
    "\1\33\1\34\1\16\1\35\1\36\1\37";

  private static int [] zzUnpackAction() {
    int [] result = new int[54];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\51\0\122\0\51\0\51\0\51\0\51\0\51"+
    "\0\173\0\51\0\51\0\244\0\51\0\315\0\366\0\u011f"+
    "\0\u0148\0\u0171\0\u019a\0\u01c3\0\u01ec\0\u0215\0\u023e\0\51"+
    "\0\51\0\51\0\51\0\51\0\51\0\u011f\0\u0267\0\u0290"+
    "\0\u011f\0\u02b9\0\u011f\0\u02e2\0\u030b\0\u0334\0\u035d\0\u011f"+
    "\0\u0386\0\u03af\0\u03d8\0\u0401\0\u042a\0\u011f\0\u0453\0\u047c"+
    "\0\u011f\0\u011f\0\u04a5\0\u011f\0\u011f\0\u011f";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[54];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\2\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\2\17\27"+
    "\1\30\1\31\1\32\52\0\1\3\65\0\1\33\43\0"+
    "\2\14\53\0\1\34\50\0\1\35\44\0\2\20\4\0"+
    "\27\20\14\0\2\20\4\0\21\20\1\36\5\20\14\0"+
    "\2\20\4\0\17\20\1\37\1\40\6\20\14\0\2\20"+
    "\4\0\13\20\1\41\4\20\1\42\3\20\1\43\2\20"+
    "\14\0\2\20\4\0\23\20\1\44\3\20\14\0\2\20"+
    "\4\0\15\20\1\45\11\20\14\0\2\20\4\0\15\20"+
    "\1\46\11\20\14\0\2\27\4\0\7\27\1\0\17\27"+
    "\14\0\2\20\4\0\24\20\1\47\2\20\14\0\2\20"+
    "\4\0\11\20\1\50\15\20\14\0\2\20\4\0\22\20"+
    "\1\51\4\20\14\0\2\20\4\0\16\20\1\52\2\20"+
    "\1\53\5\20\14\0\2\20\4\0\12\20\1\54\14\20"+
    "\14\0\2\20\4\0\16\20\1\55\10\20\14\0\2\20"+
    "\4\0\12\20\1\56\14\20\14\0\2\20\4\0\26\20"+
    "\1\57\14\0\2\20\4\0\20\20\1\60\6\20\14\0"+
    "\2\20\4\0\14\20\1\61\12\20\14\0\2\20\4\0"+
    "\20\20\1\62\6\20\14\0\2\20\4\0\17\20\1\63"+
    "\7\20\14\0\2\20\4\0\25\20\1\64\1\20\14\0"+
    "\2\20\4\0\25\20\1\65\1\20\14\0\2\20\4\0"+
    "\12\20\1\66\14\20\3\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[1230];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\5\11\1\1\2\11\1\1\1\11"+
    "\12\1\6\11\31\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[54];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.