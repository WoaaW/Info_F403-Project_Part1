// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: LexicalAnalyzer.flex


@SuppressWarnings("fallthrough")
class LexicalAnalyzer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\2\2\22\0\1\1\1\4"+
    "\2\0\1\5\3\0\1\6\1\7\1\10\1\11\1\0"+
    "\1\12\1\0\1\13\1\14\11\15\1\0\1\16\1\17"+
    "\1\20\1\21\2\0\3\22\1\23\1\24\3\22\1\25"+
    "\6\22\1\26\3\22\1\27\2\22\1\30\3\22\4\0"+
    "\1\31\1\0\3\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\2\32\1\41\1\32\1\42\1\43\1\44\1\32"+
    "\1\45\1\46\1\47\1\50\5\32\1\51\1\52\1\53"+
    "\7\0\1\3\u01a2\0\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\2\13\1\14\1\15\1\16"+
    "\7\17\1\20\1\21\1\22\1\23\1\0\1\24\1\25"+
    "\1\26\1\27\2\17\1\30\1\17\1\31\3\17\1\0"+
    "\1\17\1\32\5\17\1\33\1\34\2\17\1\35\1\36"+
    "\1\17\1\37\1\40\1\41";

  private static int [] zzUnpackAction() {
    int [] result = new int[59];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\54\0\130\0\54\0\204\0\260\0\54\0\54"+
    "\0\54\0\54\0\334\0\54\0\54\0\u0108\0\54\0\u0134"+
    "\0\u0160\0\u018c\0\u01b8\0\u01e4\0\u0210\0\u023c\0\u0268\0\u0294"+
    "\0\u02c0\0\54\0\54\0\54\0\u02ec\0\54\0\54\0\54"+
    "\0\u018c\0\u0318\0\u0344\0\u018c\0\u0370\0\u018c\0\u039c\0\u03c8"+
    "\0\u03f4\0\u0420\0\u044c\0\u018c\0\u0478\0\u04a4\0\u04d0\0\u04fc"+
    "\0\u0528\0\54\0\u018c\0\u0554\0\u0580\0\u018c\0\u018c\0\u05ac"+
    "\0\u018c\0\u018c\0\u018c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[59];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\2\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\2\17\31\1\32\1\33\1\34\55\0\2\3\55\0"+
    "\1\35\47\0\2\6\2\0\50\6\21\0\1\36\46\0"+
    "\2\16\56\0\1\37\53\0\1\40\47\0\2\22\4\0"+
    "\27\22\17\0\2\22\4\0\21\22\1\41\5\22\17\0"+
    "\2\22\4\0\17\22\1\42\1\43\6\22\17\0\2\22"+
    "\4\0\13\22\1\44\4\22\1\45\3\22\1\46\2\22"+
    "\17\0\2\22\4\0\23\22\1\47\3\22\17\0\2\22"+
    "\4\0\15\22\1\50\11\22\17\0\2\22\4\0\15\22"+
    "\1\51\11\22\17\0\2\31\4\0\27\31\3\0\4\35"+
    "\1\52\47\35\14\0\2\22\4\0\24\22\1\53\2\22"+
    "\17\0\2\22\4\0\11\22\1\54\15\22\17\0\2\22"+
    "\4\0\22\22\1\55\4\22\17\0\2\22\4\0\16\22"+
    "\1\56\2\22\1\57\5\22\17\0\2\22\4\0\12\22"+
    "\1\60\14\22\17\0\2\22\4\0\16\22\1\61\10\22"+
    "\7\0\1\62\63\0\2\22\4\0\12\22\1\63\14\22"+
    "\17\0\2\22\4\0\26\22\1\64\17\0\2\22\4\0"+
    "\20\22\1\65\6\22\17\0\2\22\4\0\14\22\1\66"+
    "\12\22\17\0\2\22\4\0\20\22\1\67\6\22\17\0"+
    "\2\22\4\0\17\22\1\70\7\22\17\0\2\22\4\0"+
    "\25\22\1\71\1\22\17\0\2\22\4\0\25\22\1\72"+
    "\1\22\17\0\2\22\4\0\12\22\1\73\14\22\3\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[1496];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\2\1\4\11\1\1\2\11"+
    "\1\1\1\11\12\1\3\11\1\0\3\11\11\1\1\0"+
    "\7\1\1\11\11\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[59];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();